#!/usr/bin/python3

import sys
import time
import random
import subprocess
import multiprocessing
from os.path import exists

from NekoMimi import utils as nm
from NekoMimi import colourimi

__author__ = "NekoMimiOfficial"
__email__ = "nekomimi@tilde,team"
__version__ = "0.2.2"


class Pallet:
    text = "#DDDDDD"
    text2 = "#888888"
    mochaBG = "#1E1E2E"
    mochaFG = "#CDD6F4"
    catBlue = "#799DDB"
    catRed = "#F38BA8"
    catCyan = "#89DCEB"
    catPink = "#F5C2E7"
    catYellow = "#F9E2AF"
    catOrange = "#F3B993"
    catGreen = "#A2DCAA"
    catPurr = "#C6A1F0"

    def random(self):
        slots = [
            self.text,
            self.text2,
            self.mochaFG,
            self.catYellow,
            self.catOrange,
            self.catBlue,
            self.catPurr,
            self.catRed,
            self.catCyan,
            self.catPink,
            self.catGreen,
        ]
        return random.choice(slots)


__disclaimer__ = """
 ^ ^  VitaDockLite vXXXXX  supports the PS Vita
=UwU= This app is provided with [ZERO] warranty
 w w  NekoMimi @ NekoLabs (2023)   made with <3
"""

banner = nm.figlet("VDock Lite", "small")
__disclaimer__ = __disclaimer__.replace("XXXXX", __version__)
factory = colourimi.colourFactory()


def kprint(text, col=Pallet.text):
    factory.text = text
    factory.colour = col
    factory.cinit()
    factory.cprint()
    return


kprint(banner, Pallet.mochaFG)
kprint(__disclaimer__, Pallet.text2)

# variables
FS = ["", "--fullscreen"]
PWD = subprocess.getoutput("pwd")
HOME = subprocess.getoutput("echo $HOME")
DEF_CONFIG = f"{HOME}/.config/VDockLite/settings.conf"

# argv handler
if "--version" in sys.argv:
    kprint(f"VDockLite v{__version__}", Pallet.random(Pallet))
    exit(0)

# config processing
DEF_CONF = """
fullscreen 0
#sets whether the video streams open in fullscreen

theme default
#sets themes , named by folder name

splash 0
#toggles connection splash

dark 1
#uses dark splash
"""


def conf_parse(conf):
    data = nm.read(conf)
    tks = {}
    lines = data.split("\n")
    for line in lines:
        if not line.startswith("#"):
            if len(line.split(" ", 1)) > 1:
                tks[line.split(" ", 1)[0]] = line.split(" ", 1)[1]
    return tks


def safeRules(rawTOKENS):
    if "fullscreen" in rawTOKENS:
        try:
            val = int(rawTOKENS["fullscreen"])
            rawTOKENS["fullscreen"] = val
            if val < 0 or val > 1:
                rawTOKENS["fullscreen"] = 0
        except Exception as e:
            rawTOKENS["fullscreen"] = 0
    else:
        rawTOKENS["fullscreen"] = 0

    if "dark" in rawTOKENS:
        if rawTOKENS["dark"] == "1":
            rawTOKENS["dark"] = "Dark"
        elif rawTOKENS["dark"] == "0":
            rawTOKENS["dark"] = "Light"
        else:
            rawTOKENS["dark"] = "Dark"
    else:
        rawTOKENS["dark"] = "Dark"

    return rawTOKENS


if exists(DEF_CONFIG):
    kprint("Loading from file", Pallet.catYellow)
    flags = conf_parse(DEF_CONFIG)
    flags = safeRules(flags)
else:
    kprint("No config file found", Pallet.catRed)
    subprocess.getoutput("mkdir ~/.config/VDockLite/")
    nm.write(DEF_CONF, DEF_CONFIG)
    flags = conf_parse(DEF_CONFIG)
    flags = safeRules(flags)


class Options:
    def __init__(self, tk) -> None:
        self.full: int = 0
        self.theme = "default"
        self.splash = "0"
        self.dark = ""

        self.sets(tk)

    def sets(self, tk):
        if "fullscreen" in tk:
            self.full = tk["fullscreen"]
        if "theme" in tk:
            self.theme = tk["theme"]
        if "splash" in tk:
            self.splash = tk["splash"]
        if "dark" in tk:
            self.dark = tk["dark"]

    def __str__(self):
        return f"[fs] {self.full}\n[theme] {self.theme}\n[splash] {self.splash}\n[dark] {self.dark}"


settings = Options(flags)
kprint(settings, Pallet.catPurr)
print("")


def bgmPlayer():
    currentBGM = f"{HOME}/.local/share/VDlite/themes/{settings.theme}/BGM.*"
    play = exists(currentBGM)
    if play:
        subprocess.getoutput("pkill mpv")
        cmd = f"mpv {currentBGM} --loop --no-audio-display"
        run = subprocess.Popen(
            ["bash", cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        stdO, stdE = run.communicate()


def mainProc():
    player = 0
    bgPlayer = multiprocessing.Process(target=bgmPlayer)
    bgPlayer.start()

    kprint("Vita ready to connect", Pallet.catOrange)

    while True:
        devices = subprocess.getoutput("v4l2-ctl --list-devices")
        lines = devices.split("\n")
        i = 0
        for line in lines:
            i += 1
            if line.startswith("PSVita"):
                player = 1
                subprocess.getoutput("pkill mpv")
                kprint("Vita plugged in!", Pallet.catBlue)
                vdev = f"/dev/video{lines[i][-1]}"
                kprint(f"Vita on> {vdev}", Pallet.catYellow)
                print("\n===============================\n")
                if settings.splash == "1":
                    path = f"{HOME}/.local/share/VDlite/themes/{settings.theme}/{settings.dark}.*"
                    if exists(path):
                        subprocess.getoutput(f"mpv {path} {FS[settings.full]}")
                subprocess.getoutput(
                    f"mpv av://v4l2:{vdev} --profile=low-latency --untimed {FS[settings.full]}"
                )
            else:
                if player == 1:
                    bgPlayer.terminate()
                    del bgPlayer
                    bgPlayer = multiprocessing.Process(target=bgmPlayer)
                    bgPlayer.start()
                    player = 0
        time.sleep(1)


if __name__ == "__main__":
    mainProc()
