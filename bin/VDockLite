#!/usr/bin/python3

import subprocess
from os.path import exists

from NekoMimi import utils as nm
from NekoMimi import colourimi

class Pallet:
    text = "#DDDDDD"
    text2 = "#888888"
    catBlue = "#799DDB"
    catRed = "#F38BA8"
    catOrange = "#F3B993"
    catGreen = "#A2DCAA"
    catPurr = "#C6A1F0"

license = """
 ^ ^  VitaDockLite v0.2.0  supports the PS Vita
=UwU= This app is provided with [ZERO] warranty
 w w  NekoMimi @ NekoLabs (2023)   made with <3
"""

banner = nm.figlet("VDock Lite", "small")

factory = colourimi.colourFactory()

def kprint(text, col=Pallet.text):
    factory.text = text
    factory.colour = col
    factory.cinit()
    factory.cprint()
    return

kprint(banner, Pallet.text)
kprint(license, Pallet.text2)

#variables
PWD = subprocess.getoutput('pwd')
HOME = subprocess.getoutput('echo $HOME')
DEF_CONFIG = f"{HOME}/.config/VDockLite/settings.conf"

#config processing
DEF_CONF = """
fullscreen 0
#sets whether the video streams open in fullscreen

theme none
#sets themes , named by folder name

splash 0
#toggles connection splash

dark 1
#uses dark splash
"""

def conf_parse(conf):
    data = nm.read(conf)
    tks = {}
    lines = data.split("\n")
    for line in lines:
        if not line.startswith("#"):
            if len(line.split(" ", 1)) > 1:
                tks[line.split(" ", 1)[0]] = line.split(" ", 1)[1]
    return tks

if exists(DEF_CONFIG):
    kprint("Loading from file", Pallet.catOrange)
    flags = conf_parse(DEF_CONFIG)
else:
    kprint("No config file found", Pallet.catRed)
    subprocess.getoutput("mkdir ~/.config/VDockLite/")
    nm.write(DEF_CONF, DEF_CONFIG)
    flags = conf_parse(DEF_CONFIG)

class Options:
    def __init__(self, tk) -> None:
        self.full = '0'
        self.theme = 'none'
        self.splash = '0'
        self.dark = ''

        self.sets(tk)

    def sets(self, tk):
        if "fullscreen" in tk:
            self.full = tk["fullscreen"]
        if "theme" in tk:
            self.theme = tk["theme"]
        if "splash" in tk:
            self.splash = tk["splash"]
        if "dark" in tk:
            self.dark = tk["dark"]

    def __str__(self):
        return f"[fs] {self.full}\n[theme] {self.theme}\n[splash] {self.splash}\n[dark] {self.dark}"

settings = Options(flags)
kprint(settings, Pallet.catPurr)
